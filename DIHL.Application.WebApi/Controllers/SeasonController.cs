using DIHL.Application.Core.Interfaces;
using DIHL.DTOs;
using Microsoft.AspNetCore.Mvc;
using Serilog;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace DIHL.Application.WebApi.Controllers
{
    [Produces("application/json")]
    [Route("api/Season")]
    public class SeasonController : BaseApiController
    {
        private readonly ISeasonService _seasonService;
        private readonly ILogger _log = Log.ForContext<SeasonController>();

        public SeasonController(ISeasonService seasonService)
        {
            _seasonService = seasonService;
        }

        /// <summary>
        /// Lists all the season records.
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [ProducesResponseType(typeof(List<LeagueDTO>), 200)]
        public async Task<IActionResult> List()
        {
            IActionResult result = await Execute(_log, async () => await _seasonService.List());
            return result;
        }

        /// <summary>
        /// Gets the specified season.
        /// </summary>
        /// <param name="id">The season identifier.</param>
        /// <returns></returns>
        [HttpGet("{id}")]
        [ProducesResponseType(typeof(SeasonDTO), 200)]
        public async Task<IActionResult> Get(Guid id)
        {
            IActionResult result = await Execute(_log, async () => await _seasonService.Get(id));
            return result;
        }

        /// <summary>
        /// Upserts an season record.
        /// The season id is generated by the server.
        /// </summary>
        /// <param name="value">The entity data.</param>
        /// <returns></returns>
        [HttpPost]
        [ProducesResponseType(typeof(SeasonDTO), 200)]
        public async Task<IActionResult> Post([FromBody]SeasonDTO value)
        {
            IActionResult result = await Execute(_log, async () => await _seasonService.Upsert(value));
            return result;
        }

        /// <summary>
        /// Puts the posted season data at the specific location.
        /// </summary>
        /// <param name="id">The Id to assign to the season.</param>
        /// <param name="value">The league data.</param>
        /// <returns></returns>
        [HttpPut("{id}")]
        [ProducesResponseType(typeof(SeasonDTO), 200)]
        public async Task<IActionResult> Put(Guid id, [FromBody]SeasonDTO value)
        {
            if (id != value.Id)
            {
                return this.BadRequest("Posted season Id does not match the request.");
            }
            IActionResult result = await Execute(_log, async () => await _seasonService.Upsert(value));
            return result;
        }

        /// <summary>
        /// Deletes the specified season.
        /// </summary>
        /// <param name="id">The season identifier.</param>
        /// <returns></returns>
        [HttpDelete("{id}")]
        [ProducesResponseType(typeof(bool), 200)]
        public async Task<IActionResult> Delete(Guid id)
        {
            IActionResult result = await Execute(_log, async () => await _seasonService.Delete(id));
            return result;
        }
    }
}
