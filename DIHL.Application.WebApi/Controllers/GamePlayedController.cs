using DIHL.Application.Core.Interfaces;
using Microsoft.AspNetCore.Mvc;
using Serilog;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using DIHL.Domain.Models;
using Microsoft.AspNetCore.Authorization;

namespace DIHL.Application.WebApi.Controllers
{
    [Produces("application/json")]
    [Route("api/GamePlayed")]
    [Authorize]
    public class GamePlayedController : BaseApiController
    {
        private readonly IGamePlayedService _gameService;
        private readonly ILogger _log = Log.ForContext<GamePlayedController>();

        public GamePlayedController(IGamePlayedService gameService)
        {
            _gameService = gameService;
        }

        /// <summary>
        /// Lists all the game records.
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [ProducesResponseType(typeof(List<GamePlayedDTO>), 200)]
        public async Task<IActionResult> List()
        {
            IActionResult result = await Execute(_log, async () => await _gameService.List());
            return result;
        }

        /// <summary>
        /// Gets the specified game.
        /// </summary>
        /// <param name="playerId">The game identifier.</param>
        /// <param name="gameId">The game identifier.</param>
        /// <returns></returns>
        [HttpGet("{id}")]
        [ProducesResponseType(typeof(GamePlayedDTO), 200)]
        public async Task<IActionResult> Get(Guid playerId, Guid gameId)
        {
            IActionResult result = await Execute(_log, async () => await _gameService.Get(playerId, gameId));
            return result;
        }

        /// <summary>
        /// Upserts an game record.
        /// The game id is generated by the server.
        /// </summary>
        /// <param name="value">The entity data.</param>
        /// <returns></returns>
        [HttpPost]
        [ProducesResponseType(typeof(GamePlayedDTO), 200)]
        public async Task<IActionResult> Post([FromBody]GamePlayedDTO value)
        {
            IActionResult result = await Execute(_log, async () => await _gameService.Upsert(value));
            return result;
        }

        /// <summary>
        /// Deletes the specified game played.
        /// </summary>
        /// <param name="playerId">The player identifier.</param>
        /// <param name="gameId">The game identifier.</param>
        /// <returns></returns>
        [HttpDelete("{id}")]
        [ProducesResponseType(typeof(bool), 200)]
        public async Task<IActionResult> Delete(Guid playerId, Guid gameId)
        {
            IActionResult result = await Execute(_log, async () => await _gameService.Delete(playerId, gameId));
            return result;
        }
    }
}
