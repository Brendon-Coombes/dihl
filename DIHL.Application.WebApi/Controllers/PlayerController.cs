using DIHL.Application.Core.Interfaces;
using DIHL.DTOs;
using Microsoft.AspNetCore.Mvc;
using Serilog;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace DIHL.Application.WebApi.Controllers
{
    [Produces("application/json")]
    [Route("api/Player")]
    public class PlayerController : BaseApiController
    {
        private readonly ILogger _log = Log.ForContext<PlayerController>();

        public PlayerController()
        {
        }

        /// <summary>
        /// Lists all the player records.
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public async Task<IActionResult> List()
        {
            return NoContent();
        }

        /// <summary>
        /// Gets the specified player.
        /// </summary>
        /// <param name="id">The player identifier.</param>
        /// <returns></returns>
        [HttpGet("{id}")]
        public async Task<IActionResult> Get(Guid id)
        {
            return NoContent();
        }

        /// <summary>
        /// Upserts an player record.
        /// The player id is generated by the server.
        /// </summary>
        /// <param name="value">The entity data.</param>
        /// <returns></returns>
        [HttpPost]
        public async Task<IActionResult> Post([FromBody]object value)
        {
            return Unauthorized();
        }

        /// <summary>
        /// Puts the posted player data at the specific location.
        /// </summary>
        /// <param name="id">The Id to assign to the player.</param>
        /// <param name="value">The player data.</param>
        /// <returns></returns>
        [HttpPut("{id}")]
        public async Task<IActionResult> Put(Guid id, [FromBody]object value)
        {
            return Unauthorized();
        }

        /// <summary>
        /// Deletes the specified player.
        /// </summary>
        /// <param name="id">The player identifier.</param>
        /// <returns></returns>
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(Guid id)
        {
            return Unauthorized();
        }
    }
}
